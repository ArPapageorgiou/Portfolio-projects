// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240614150840_ChangePropertyName")]
    partial class ChangePropertyName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Data", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AppTemp")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "app_temp");

                    b.Property<float>("Aqi")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "aqi");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "city_name");

                    b.Property<float>("Clouds")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "clouds");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "country_code");

                    b.Property<string>("Datetime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "datetime");

                    b.Property<double>("Dewpt")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "dewpt");

                    b.Property<double>("Dhi")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "dhi");

                    b.Property<double>("Dni")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "dni");

                    b.Property<double>("ElevAngle")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "elev_angle");

                    b.Property<double>("Ghi")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "ghi");

                    b.Property<double>("Gust")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "gust");

                    b.Property<float>("HAngle")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "h_angle");

                    b.Property<double>("Lat")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "lat");

                    b.Property<double>("Lon")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "lon");

                    b.Property<string>("ObTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ob_time");

                    b.Property<string>("Pod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "pod");

                    b.Property<double>("Precip")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "precip");

                    b.Property<double>("Pres")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "pres");

                    b.Property<float>("Rh")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "rh");

                    b.Property<double>("Slp")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "slp");

                    b.Property<double>("SolarRad")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "solar_rad");

                    b.Property<string>("Sources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "state_code");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "station");

                    b.Property<string>("Sunrise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "sunrise");

                    b.Property<string>("Sunset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "sunset");

                    b.Property<double>("Temp")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "temp");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "timezone");

                    b.Property<long>("Ts")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "ts");

                    b.Property<float>("Uv")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "uv");

                    b.Property<float>("Vis")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "vis");

                    b.Property<int>("WeatherDataForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("WeatherId")
                        .HasColumnType("int");

                    b.Property<string>("WindCdir")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_cdir");

                    b.Property<string>("WindCdirFull")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_cdir_full");

                    b.Property<float>("WindDir")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_dir");

                    b.Property<double>("WindSpd")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_spd");

                    b.HasKey("Id");

                    b.HasIndex("WeatherDataForeignKey");

                    b.HasIndex("WeatherId")
                        .IsUnique();

                    b.ToTable("Data");

                    b.HasAnnotation("Relational:JsonPropertyName", "data");
                });

            modelBuilder.Entity("Domain.Models.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "icon");

                    b.HasKey("Id");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("Domain.Models.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.HasKey("Id");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("Domain.Models.Data", b =>
                {
                    b.HasOne("Domain.Models.WeatherData", "WeatherData")
                        .WithMany("DataList")
                        .HasForeignKey("WeatherDataForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Weather", "Weather")
                        .WithOne("Db_Data")
                        .HasForeignKey("Domain.Models.Data", "WeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weather");

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("Domain.Models.Weather", b =>
                {
                    b.Navigation("Db_Data")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.WeatherData", b =>
                {
                    b.Navigation("DataList");
                });
#pragma warning restore 612, 618
        }
    }
}
